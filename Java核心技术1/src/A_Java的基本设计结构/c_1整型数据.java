package A_Java的基本设计结构;

public class c_1整型数据 {
	public static void main(String[] args) {
		//二进制	2
		System.out.println(0b10);
		//八进制	8
		System.out.println(010);
		//十进制	10
		System.out.println(10);
		//十六进制	16
		System.out.println(0X10);
		
	}

}
/** Java是一种强类型语言。这就意味着必须为每一个变量声明一种类型。在Java中，一共有8种基本类型（primitive type），
 * 	其中有4种整型、2种浮点类型、1种用于表示Unicode编码的字符单元的字符类型char（请参见论述char类型的章节）和1种用于表示真值的boolean类型。
 * 
 *  --什么是强类型语言：
 * 	  》强类型语言是一种强制类型定义的语言，即一旦某一个变量被定义类型，如果不经强制转换，那么它永远就死该数据类型。 
 * 	  》而弱类型语言是一种弱类型定义的语言，某一个变量被定义类型，该变量可以根据环境变化自动进行转换，不需要经过现行强制转换。
 * 
 * 	一、整型数据
 * 		整型用于表示没有小数部分的数值，它允许是负数。
 * 			Java提供了4种整型：	① long	―― 占用八字节、取值范围-2^63至2^63 	-9223372036854774808 ~ 9223372036854774807
 * 						    ② int  ―― 占用四个字节、取值范围-2^31至2^31 	-2147483648 ~ 2147483647
 * 							③ short  ―― 占用二个字节、取值范围-2^15至2^15    -32768 ~ 32767
 * 							④ byte  ―― 占用一个字节、取值范围-2^7至2^7	     -128 ~ 127
 * 
 * 		--在Java中应该根据使用场景选择使用数据类型（比如储存星球上的生命体需要使用long），一般来说，Java使用得最多的整型数据为int。
 * 		
 * 		--在Java中，整型的范围与运行Java代码的机器无关。这就解决了软件从一个平台移植到另一个平台，或者在同一个平台中的不同操作系统之间进行移植给程序员带来的诸多问题。
 * 		  与此相反，C和C++程序需要针对不同的处理器选择最为高效的整型，这样就有可能造成一个在32位处理器上运行很好的C程序在16位系统上运行却发生整数溢出。由于Java程序
 * 		  必须保证在所有机器上都能够得到相同的运行结果，所以各种数据类型的取值范围必须固定。
 *		
 *	二、数据后缀
 *		数据后缀是用以区分不同数据的类型的一种标识
 *		1、长整型数值有一个后缀L或l（如4000000000L）。十六进制数值有一个前缀0x或0X（如0xCAFE）。八进制有一个前缀0，例如，010对应八进制中的8
 *		2、从Java 7开始，加上前缀0b或0B就可以写二进制数。同样是从Java 7开始，还可以为数字字面量加下划线，如用1_000_000（或0b1111_0100_0010_0100_0000）表示一百万。
 */
